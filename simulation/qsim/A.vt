// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2017 17:42:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    A2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module A2_vlg_sample_tst(
	ALUBUS,
	CLKA,
	CLKB,
	CLR,
	CN,
	io,
	latch_clk,
	latch_OEN,
	M,
	S0,
	S1,
	S2,
	S3,
	sampler_tx
);
input  ALUBUS;
input  CLKA;
input  CLKB;
input  CLR;
input  CN;
input [15:0] io;
input [1:0] latch_clk;
input [1:0] latch_OEN;
input  M;
input  S0;
input  S1;
input  S2;
input  S3;
output sampler_tx;

reg sample;
time current_time;
always @(ALUBUS or CLKA or CLKB or CLR or CN or io or latch_clk or latch_OEN or M or S0 or S1 or S2 or S3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module A2_vlg_check_tst (
	CN4,
	fa,
	fb,
	io,
	sampler_rx
);
input  CN4;
input [15:0] fa;
input [15:0] fb;
input [15:0] io;
input sampler_rx;

reg  CN4_expected;
reg [15:0] fa_expected;
reg [15:0] fb_expected;
reg [15:0] io_expected;

reg  CN4_prev;
reg [15:0] fa_prev;
reg [15:0] fb_prev;
reg [15:0] io_prev;

reg  CN4_expected_prev;
reg [15:0] fa_expected_prev;
reg [15:0] fb_expected_prev;
reg [15:0] io_expected_prev;

reg  last_CN4_exp;
reg [15:0] last_fa_exp;
reg [15:0] last_fb_exp;
reg [15:0] last_io_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	CN4_prev = CN4;
	fa_prev = fa;
	fb_prev = fb;
	io_prev = io;
end

// update expected /o prevs

always @(trigger)
begin
	CN4_expected_prev = CN4_expected;
	fa_expected_prev = fa_expected;
	fb_expected_prev = fb_expected;
	io_expected_prev = io_expected;
end



// expected CN4
initial
begin
	CN4_expected = 1'bX;
end 
// expected fa[ 15 ]
initial
begin
	fa_expected[15] = 1'bX;
end 
// expected fa[ 14 ]
initial
begin
	fa_expected[14] = 1'bX;
end 
// expected fa[ 13 ]
initial
begin
	fa_expected[13] = 1'bX;
end 
// expected fa[ 12 ]
initial
begin
	fa_expected[12] = 1'bX;
end 
// expected fa[ 11 ]
initial
begin
	fa_expected[11] = 1'bX;
end 
// expected fa[ 10 ]
initial
begin
	fa_expected[10] = 1'bX;
end 
// expected fa[ 9 ]
initial
begin
	fa_expected[9] = 1'bX;
end 
// expected fa[ 8 ]
initial
begin
	fa_expected[8] = 1'bX;
end 
// expected fa[ 7 ]
initial
begin
	fa_expected[7] = 1'bX;
end 
// expected fa[ 6 ]
initial
begin
	fa_expected[6] = 1'bX;
end 
// expected fa[ 5 ]
initial
begin
	fa_expected[5] = 1'bX;
end 
// expected fa[ 4 ]
initial
begin
	fa_expected[4] = 1'bX;
end 
// expected fa[ 3 ]
initial
begin
	fa_expected[3] = 1'bX;
end 
// expected fa[ 2 ]
initial
begin
	fa_expected[2] = 1'bX;
end 
// expected fa[ 1 ]
initial
begin
	fa_expected[1] = 1'bX;
end 
// expected fa[ 0 ]
initial
begin
	fa_expected[0] = 1'bX;
end 
// expected fb[ 15 ]
initial
begin
	fb_expected[15] = 1'bX;
end 
// expected fb[ 14 ]
initial
begin
	fb_expected[14] = 1'bX;
end 
// expected fb[ 13 ]
initial
begin
	fb_expected[13] = 1'bX;
end 
// expected fb[ 12 ]
initial
begin
	fb_expected[12] = 1'bX;
end 
// expected fb[ 11 ]
initial
begin
	fb_expected[11] = 1'bX;
end 
// expected fb[ 10 ]
initial
begin
	fb_expected[10] = 1'bX;
end 
// expected fb[ 9 ]
initial
begin
	fb_expected[9] = 1'bX;
end 
// expected fb[ 8 ]
initial
begin
	fb_expected[8] = 1'bX;
end 
// expected fb[ 7 ]
initial
begin
	fb_expected[7] = 1'bX;
end 
// expected fb[ 6 ]
initial
begin
	fb_expected[6] = 1'bX;
end 
// expected fb[ 5 ]
initial
begin
	fb_expected[5] = 1'bX;
end 
// expected fb[ 4 ]
initial
begin
	fb_expected[4] = 1'bX;
end 
// expected fb[ 3 ]
initial
begin
	fb_expected[3] = 1'bX;
end 
// expected fb[ 2 ]
initial
begin
	fb_expected[2] = 1'bX;
end 
// expected fb[ 1 ]
initial
begin
	fb_expected[1] = 1'bX;
end 
// expected fb[ 0 ]
initial
begin
	fb_expected[0] = 1'bX;
end 
// generate trigger
always @(CN4_expected or CN4 or fa_expected or fa or fb_expected or fb or io_expected or io)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CN4 = %b | expected fa = %b | expected fb = %b | expected io = %b | ",CN4_expected_prev,fa_expected_prev,fb_expected_prev,io_expected_prev);
	$display("| real CN4 = %b | real fa = %b | real fb = %b | real io = %b | ",CN4_prev,fa_prev,fb_prev,io_prev);
`endif
	if (
		( CN4_expected_prev !== 1'bx ) && ( CN4_prev !== CN4_expected_prev )
		&& ((CN4_expected_prev !== last_CN4_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CN4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CN4_expected_prev);
		$display ("     Real value = %b", CN4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CN4_exp = CN4_expected_prev;
	end
	if (
		( fa_expected_prev[0] !== 1'bx ) && ( fa_prev[0] !== fa_expected_prev[0] )
		&& ((fa_expected_prev[0] !== last_fa_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[0] = fa_expected_prev[0];
	end
	if (
		( fa_expected_prev[1] !== 1'bx ) && ( fa_prev[1] !== fa_expected_prev[1] )
		&& ((fa_expected_prev[1] !== last_fa_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[1] = fa_expected_prev[1];
	end
	if (
		( fa_expected_prev[2] !== 1'bx ) && ( fa_prev[2] !== fa_expected_prev[2] )
		&& ((fa_expected_prev[2] !== last_fa_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[2] = fa_expected_prev[2];
	end
	if (
		( fa_expected_prev[3] !== 1'bx ) && ( fa_prev[3] !== fa_expected_prev[3] )
		&& ((fa_expected_prev[3] !== last_fa_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[3] = fa_expected_prev[3];
	end
	if (
		( fa_expected_prev[4] !== 1'bx ) && ( fa_prev[4] !== fa_expected_prev[4] )
		&& ((fa_expected_prev[4] !== last_fa_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[4] = fa_expected_prev[4];
	end
	if (
		( fa_expected_prev[5] !== 1'bx ) && ( fa_prev[5] !== fa_expected_prev[5] )
		&& ((fa_expected_prev[5] !== last_fa_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[5] = fa_expected_prev[5];
	end
	if (
		( fa_expected_prev[6] !== 1'bx ) && ( fa_prev[6] !== fa_expected_prev[6] )
		&& ((fa_expected_prev[6] !== last_fa_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[6] = fa_expected_prev[6];
	end
	if (
		( fa_expected_prev[7] !== 1'bx ) && ( fa_prev[7] !== fa_expected_prev[7] )
		&& ((fa_expected_prev[7] !== last_fa_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[7] = fa_expected_prev[7];
	end
	if (
		( fa_expected_prev[8] !== 1'bx ) && ( fa_prev[8] !== fa_expected_prev[8] )
		&& ((fa_expected_prev[8] !== last_fa_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[8] = fa_expected_prev[8];
	end
	if (
		( fa_expected_prev[9] !== 1'bx ) && ( fa_prev[9] !== fa_expected_prev[9] )
		&& ((fa_expected_prev[9] !== last_fa_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[9] = fa_expected_prev[9];
	end
	if (
		( fa_expected_prev[10] !== 1'bx ) && ( fa_prev[10] !== fa_expected_prev[10] )
		&& ((fa_expected_prev[10] !== last_fa_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[10] = fa_expected_prev[10];
	end
	if (
		( fa_expected_prev[11] !== 1'bx ) && ( fa_prev[11] !== fa_expected_prev[11] )
		&& ((fa_expected_prev[11] !== last_fa_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[11] = fa_expected_prev[11];
	end
	if (
		( fa_expected_prev[12] !== 1'bx ) && ( fa_prev[12] !== fa_expected_prev[12] )
		&& ((fa_expected_prev[12] !== last_fa_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[12] = fa_expected_prev[12];
	end
	if (
		( fa_expected_prev[13] !== 1'bx ) && ( fa_prev[13] !== fa_expected_prev[13] )
		&& ((fa_expected_prev[13] !== last_fa_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[13] = fa_expected_prev[13];
	end
	if (
		( fa_expected_prev[14] !== 1'bx ) && ( fa_prev[14] !== fa_expected_prev[14] )
		&& ((fa_expected_prev[14] !== last_fa_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[14] = fa_expected_prev[14];
	end
	if (
		( fa_expected_prev[15] !== 1'bx ) && ( fa_prev[15] !== fa_expected_prev[15] )
		&& ((fa_expected_prev[15] !== last_fa_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fa[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fa_expected_prev);
		$display ("     Real value = %b", fa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_fa_exp[15] = fa_expected_prev[15];
	end
	if (
		( fb_expected_prev[0] !== 1'bx ) && ( fb_prev[0] !== fb_expected_prev[0] )
		&& ((fb_expected_prev[0] !== last_fb_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[0] = fb_expected_prev[0];
	end
	if (
		( fb_expected_prev[1] !== 1'bx ) && ( fb_prev[1] !== fb_expected_prev[1] )
		&& ((fb_expected_prev[1] !== last_fb_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[1] = fb_expected_prev[1];
	end
	if (
		( fb_expected_prev[2] !== 1'bx ) && ( fb_prev[2] !== fb_expected_prev[2] )
		&& ((fb_expected_prev[2] !== last_fb_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[2] = fb_expected_prev[2];
	end
	if (
		( fb_expected_prev[3] !== 1'bx ) && ( fb_prev[3] !== fb_expected_prev[3] )
		&& ((fb_expected_prev[3] !== last_fb_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[3] = fb_expected_prev[3];
	end
	if (
		( fb_expected_prev[4] !== 1'bx ) && ( fb_prev[4] !== fb_expected_prev[4] )
		&& ((fb_expected_prev[4] !== last_fb_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[4] = fb_expected_prev[4];
	end
	if (
		( fb_expected_prev[5] !== 1'bx ) && ( fb_prev[5] !== fb_expected_prev[5] )
		&& ((fb_expected_prev[5] !== last_fb_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[5] = fb_expected_prev[5];
	end
	if (
		( fb_expected_prev[6] !== 1'bx ) && ( fb_prev[6] !== fb_expected_prev[6] )
		&& ((fb_expected_prev[6] !== last_fb_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[6] = fb_expected_prev[6];
	end
	if (
		( fb_expected_prev[7] !== 1'bx ) && ( fb_prev[7] !== fb_expected_prev[7] )
		&& ((fb_expected_prev[7] !== last_fb_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[7] = fb_expected_prev[7];
	end
	if (
		( fb_expected_prev[8] !== 1'bx ) && ( fb_prev[8] !== fb_expected_prev[8] )
		&& ((fb_expected_prev[8] !== last_fb_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[8] = fb_expected_prev[8];
	end
	if (
		( fb_expected_prev[9] !== 1'bx ) && ( fb_prev[9] !== fb_expected_prev[9] )
		&& ((fb_expected_prev[9] !== last_fb_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[9] = fb_expected_prev[9];
	end
	if (
		( fb_expected_prev[10] !== 1'bx ) && ( fb_prev[10] !== fb_expected_prev[10] )
		&& ((fb_expected_prev[10] !== last_fb_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[10] = fb_expected_prev[10];
	end
	if (
		( fb_expected_prev[11] !== 1'bx ) && ( fb_prev[11] !== fb_expected_prev[11] )
		&& ((fb_expected_prev[11] !== last_fb_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[11] = fb_expected_prev[11];
	end
	if (
		( fb_expected_prev[12] !== 1'bx ) && ( fb_prev[12] !== fb_expected_prev[12] )
		&& ((fb_expected_prev[12] !== last_fb_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[12] = fb_expected_prev[12];
	end
	if (
		( fb_expected_prev[13] !== 1'bx ) && ( fb_prev[13] !== fb_expected_prev[13] )
		&& ((fb_expected_prev[13] !== last_fb_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[13] = fb_expected_prev[13];
	end
	if (
		( fb_expected_prev[14] !== 1'bx ) && ( fb_prev[14] !== fb_expected_prev[14] )
		&& ((fb_expected_prev[14] !== last_fb_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[14] = fb_expected_prev[14];
	end
	if (
		( fb_expected_prev[15] !== 1'bx ) && ( fb_prev[15] !== fb_expected_prev[15] )
		&& ((fb_expected_prev[15] !== last_fb_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port fb[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", fb_expected_prev);
		$display ("     Real value = %b", fb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_fb_exp[15] = fb_expected_prev[15];
	end
	if (
		( io_expected_prev[0] !== 1'bx ) && ( io_prev[0] !== io_expected_prev[0] )
		&& ((io_expected_prev[0] !== last_io_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[0] = io_expected_prev[0];
	end
	if (
		( io_expected_prev[1] !== 1'bx ) && ( io_prev[1] !== io_expected_prev[1] )
		&& ((io_expected_prev[1] !== last_io_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[1] = io_expected_prev[1];
	end
	if (
		( io_expected_prev[2] !== 1'bx ) && ( io_prev[2] !== io_expected_prev[2] )
		&& ((io_expected_prev[2] !== last_io_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[2] = io_expected_prev[2];
	end
	if (
		( io_expected_prev[3] !== 1'bx ) && ( io_prev[3] !== io_expected_prev[3] )
		&& ((io_expected_prev[3] !== last_io_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[3] = io_expected_prev[3];
	end
	if (
		( io_expected_prev[4] !== 1'bx ) && ( io_prev[4] !== io_expected_prev[4] )
		&& ((io_expected_prev[4] !== last_io_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[4] = io_expected_prev[4];
	end
	if (
		( io_expected_prev[5] !== 1'bx ) && ( io_prev[5] !== io_expected_prev[5] )
		&& ((io_expected_prev[5] !== last_io_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[5] = io_expected_prev[5];
	end
	if (
		( io_expected_prev[6] !== 1'bx ) && ( io_prev[6] !== io_expected_prev[6] )
		&& ((io_expected_prev[6] !== last_io_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[6] = io_expected_prev[6];
	end
	if (
		( io_expected_prev[7] !== 1'bx ) && ( io_prev[7] !== io_expected_prev[7] )
		&& ((io_expected_prev[7] !== last_io_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[7] = io_expected_prev[7];
	end
	if (
		( io_expected_prev[8] !== 1'bx ) && ( io_prev[8] !== io_expected_prev[8] )
		&& ((io_expected_prev[8] !== last_io_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[8] = io_expected_prev[8];
	end
	if (
		( io_expected_prev[9] !== 1'bx ) && ( io_prev[9] !== io_expected_prev[9] )
		&& ((io_expected_prev[9] !== last_io_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[9] = io_expected_prev[9];
	end
	if (
		( io_expected_prev[10] !== 1'bx ) && ( io_prev[10] !== io_expected_prev[10] )
		&& ((io_expected_prev[10] !== last_io_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[10] = io_expected_prev[10];
	end
	if (
		( io_expected_prev[11] !== 1'bx ) && ( io_prev[11] !== io_expected_prev[11] )
		&& ((io_expected_prev[11] !== last_io_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[11] = io_expected_prev[11];
	end
	if (
		( io_expected_prev[12] !== 1'bx ) && ( io_prev[12] !== io_expected_prev[12] )
		&& ((io_expected_prev[12] !== last_io_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[12] = io_expected_prev[12];
	end
	if (
		( io_expected_prev[13] !== 1'bx ) && ( io_prev[13] !== io_expected_prev[13] )
		&& ((io_expected_prev[13] !== last_io_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[13] = io_expected_prev[13];
	end
	if (
		( io_expected_prev[14] !== 1'bx ) && ( io_prev[14] !== io_expected_prev[14] )
		&& ((io_expected_prev[14] !== last_io_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[14] = io_expected_prev[14];
	end
	if (
		( io_expected_prev[15] !== 1'bx ) && ( io_prev[15] !== io_expected_prev[15] )
		&& ((io_expected_prev[15] !== last_io_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_io_exp[15] = io_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module A2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ALUBUS;
reg CLKA;
reg CLKB;
reg CLR;
reg CN;
reg [15:0] treg_io;
reg [1:0] latch_clk;
reg [1:0] latch_OEN;
reg M;
reg S0;
reg S1;
reg S2;
reg S3;
// wires                                               
wire CN4;
wire [15:0] fa;
wire [15:0] fb;
wire [15:0] io;

wire sampler;                             

// assign statements (if any)                          
assign io = treg_io;
A2 i1 (
// port map - connection between master ports and signals/registers   
	.ALUBUS(ALUBUS),
	.CLKA(CLKA),
	.CLKB(CLKB),
	.CLR(CLR),
	.CN(CN),
	.CN4(CN4),
	.fa(fa),
	.fb(fb),
	.io(io),
	.latch_clk(latch_clk),
	.latch_OEN(latch_OEN),
	.M(M),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3)
);

// ALUBUS
initial
begin
	ALUBUS = 1'b1;
	ALUBUS = #180000 1'b0;
	ALUBUS = #50000 1'b1;
end 

// CLKA
initial
begin
	CLKA = 1'b0;
	CLKA = #110000 1'b1;
	CLKA = #10000 1'b0;
end 

// CLKB
initial
begin
	CLKB = 1'b0;
	CLKB = #150000 1'b1;
	CLKB = #10000 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b1;
end 

// CN
initial
begin
	CN = 1'b0;
end 
// io[ 15 ]
initial
begin
	treg_io[15] = 1'b0;
	treg_io[15] = #60000 1'b1;
	treg_io[15] = #40000 1'bZ;
end 
// io[ 14 ]
initial
begin
	treg_io[14] = 1'b0;
	treg_io[14] = #60000 1'b1;
	treg_io[14] = #40000 1'bZ;
end 
// io[ 13 ]
initial
begin
	treg_io[13] = 1'b0;
	treg_io[13] = #100000 1'bZ;
end 
// io[ 12 ]
initial
begin
	treg_io[12] = 1'b0;
	treg_io[12] = #100000 1'bZ;
end 
// io[ 11 ]
initial
begin
	treg_io[11] = 1'b0;
	treg_io[11] = #100000 1'bZ;
end 
// io[ 10 ]
initial
begin
	treg_io[10] = 1'b0;
	treg_io[10] = #100000 1'bZ;
end 
// io[ 9 ]
initial
begin
	treg_io[9] = 1'b1;
	treg_io[9] = #100000 1'bZ;
end 
// io[ 8 ]
initial
begin
	treg_io[8] = 1'b1;
	treg_io[8] = #100000 1'bZ;
end 
// io[ 7 ]
initial
begin
	treg_io[7] = 1'b1;
	treg_io[7] = #60000 1'b0;
	treg_io[7] = #40000 1'bZ;
end 
// io[ 6 ]
initial
begin
	treg_io[6] = 1'b0;
	treg_io[6] = #100000 1'bZ;
end 
// io[ 5 ]
initial
begin
	treg_io[5] = 1'b0;
	treg_io[5] = #60000 1'b1;
	treg_io[5] = #40000 1'bZ;
end 
// io[ 4 ]
initial
begin
	treg_io[4] = 1'b0;
	treg_io[4] = #60000 1'b1;
	treg_io[4] = #40000 1'bZ;
end 
// io[ 3 ]
initial
begin
	treg_io[3] = 1'b0;
	treg_io[3] = #100000 1'bZ;
end 
// io[ 2 ]
initial
begin
	treg_io[2] = 1'b0;
	treg_io[2] = #100000 1'bZ;
end 
// io[ 1 ]
initial
begin
	treg_io[1] = 1'b1;
	treg_io[1] = #100000 1'bZ;
end 
// io[ 0 ]
initial
begin
	treg_io[0] = 1'b0;
	treg_io[0] = #100000 1'bZ;
end 
// latch_clk[ 1 ]
initial
begin
	latch_clk[1] = 1'b0;
	latch_clk[1] = #80000 1'b1;
	latch_clk[1] = #10000 1'b0;
end 
// latch_clk[ 0 ]
initial
begin
	latch_clk[0] = 1'b0;
	latch_clk[0] = #10000 1'b1;
	latch_clk[0] = #10000 1'b0;
	latch_clk[0] = #170000 1'b1;
	latch_clk[0] = #10000 1'b0;
end 
// latch_OEN[ 1 ]
initial
begin
	latch_OEN[1] = 1'b1;
	latch_OEN[1] = #140000 1'b0;
	latch_OEN[1] = #30000 1'b1;
end 
// latch_OEN[ 0 ]
initial
begin
	latch_OEN[0] = 1'b1;
	latch_OEN[0] = #100000 1'b0;
	latch_OEN[0] = #30000 1'b1;
	latch_OEN[0] = #140000 1'b0;
	latch_OEN[0] = #100000 1'b1;
end 

// M
initial
begin
	M = 1'b0;
end 

// S0
initial
begin
	S0 = 1'b1;
end 

// S1
initial
begin
	S1 = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 

// S3
initial
begin
	S3 = 1'b1;
end 

A2_vlg_sample_tst tb_sample (
	.ALUBUS(ALUBUS),
	.CLKA(CLKA),
	.CLKB(CLKB),
	.CLR(CLR),
	.CN(CN),
	.io(io),
	.latch_clk(latch_clk),
	.latch_OEN(latch_OEN),
	.M(M),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.sampler_tx(sampler)
);

A2_vlg_check_tst tb_out(
	.CN4(CN4),
	.fa(fa),
	.fb(fb),
	.io(io),
	.sampler_rx(sampler)
);
endmodule

