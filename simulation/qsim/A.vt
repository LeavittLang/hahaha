// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/18/2017 10:26:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    A4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module A4_vlg_sample_tst(
	ADD_ALUBUS,
	ADD_CLKA,
	ADD_CLKB,
	ADD_CLR,
	ADD_CN,
	ADD_M,
	ADD_S0,
	ADD_S1,
	ADD_S2,
	ADD_S3,
	io,
	latch_clk,
	latch_OEN,
	RAM_addr,
	RAM_CLK,
	RAM_GN,
	RAM_inclock,
	RAM_outclock,
	RAM_wren,
	shift_CLK,
	shift_GN,
	shift_LR,
	shift_S,
	sampler_tx
);
input  ADD_ALUBUS;
input  ADD_CLKA;
input  ADD_CLKB;
input  ADD_CLR;
input  ADD_CN;
input  ADD_M;
input  ADD_S0;
input  ADD_S1;
input  ADD_S2;
input  ADD_S3;
input [15:0] io;
input [1:0] latch_clk;
input [1:0] latch_OEN;
input [7:0] RAM_addr;
input  RAM_CLK;
input  RAM_GN;
input  RAM_inclock;
input  RAM_outclock;
input  RAM_wren;
input  shift_CLK;
input  shift_GN;
input  shift_LR;
input [1:0] shift_S;
output sampler_tx;

reg sample;
time current_time;
always @(ADD_ALUBUS or ADD_CLKA or ADD_CLKB or ADD_CLR or ADD_CN or ADD_M or ADD_S0 or ADD_S1 or ADD_S2 or ADD_S3 or io or latch_clk or latch_OEN or RAM_addr or RAM_CLK or RAM_GN or RAM_inclock or RAM_outclock or RAM_wren or shift_CLK or shift_GN or shift_LR or shift_S)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module A4_vlg_check_tst (
	ADD_CN4,
	io,
	sampler_rx
);
input  ADD_CN4;
input [15:0] io;
input sampler_rx;

reg  ADD_CN4_expected;
reg [15:0] io_expected;

reg  ADD_CN4_prev;
reg [15:0] io_prev;

reg  ADD_CN4_expected_prev;
reg [15:0] io_expected_prev;

reg  last_ADD_CN4_exp;
reg [15:0] last_io_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADD_CN4_prev = ADD_CN4;
	io_prev = io;
end

// update expected /o prevs

always @(trigger)
begin
	ADD_CN4_expected_prev = ADD_CN4_expected;
	io_expected_prev = io_expected;
end



// expected ADD_CN4
initial
begin
	ADD_CN4_expected = 1'bX;
end 
// generate trigger
always @(ADD_CN4_expected or ADD_CN4 or io_expected or io)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADD_CN4 = %b | expected io = %b | ",ADD_CN4_expected_prev,io_expected_prev);
	$display("| real ADD_CN4 = %b | real io = %b | ",ADD_CN4_prev,io_prev);
`endif
	if (
		( ADD_CN4_expected_prev !== 1'bx ) && ( ADD_CN4_prev !== ADD_CN4_expected_prev )
		&& ((ADD_CN4_expected_prev !== last_ADD_CN4_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADD_CN4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADD_CN4_expected_prev);
		$display ("     Real value = %b", ADD_CN4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADD_CN4_exp = ADD_CN4_expected_prev;
	end
	if (
		( io_expected_prev[0] !== 1'bx ) && ( io_prev[0] !== io_expected_prev[0] )
		&& ((io_expected_prev[0] !== last_io_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[0] = io_expected_prev[0];
	end
	if (
		( io_expected_prev[1] !== 1'bx ) && ( io_prev[1] !== io_expected_prev[1] )
		&& ((io_expected_prev[1] !== last_io_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[1] = io_expected_prev[1];
	end
	if (
		( io_expected_prev[2] !== 1'bx ) && ( io_prev[2] !== io_expected_prev[2] )
		&& ((io_expected_prev[2] !== last_io_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[2] = io_expected_prev[2];
	end
	if (
		( io_expected_prev[3] !== 1'bx ) && ( io_prev[3] !== io_expected_prev[3] )
		&& ((io_expected_prev[3] !== last_io_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[3] = io_expected_prev[3];
	end
	if (
		( io_expected_prev[4] !== 1'bx ) && ( io_prev[4] !== io_expected_prev[4] )
		&& ((io_expected_prev[4] !== last_io_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[4] = io_expected_prev[4];
	end
	if (
		( io_expected_prev[5] !== 1'bx ) && ( io_prev[5] !== io_expected_prev[5] )
		&& ((io_expected_prev[5] !== last_io_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[5] = io_expected_prev[5];
	end
	if (
		( io_expected_prev[6] !== 1'bx ) && ( io_prev[6] !== io_expected_prev[6] )
		&& ((io_expected_prev[6] !== last_io_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[6] = io_expected_prev[6];
	end
	if (
		( io_expected_prev[7] !== 1'bx ) && ( io_prev[7] !== io_expected_prev[7] )
		&& ((io_expected_prev[7] !== last_io_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[7] = io_expected_prev[7];
	end
	if (
		( io_expected_prev[8] !== 1'bx ) && ( io_prev[8] !== io_expected_prev[8] )
		&& ((io_expected_prev[8] !== last_io_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[8] = io_expected_prev[8];
	end
	if (
		( io_expected_prev[9] !== 1'bx ) && ( io_prev[9] !== io_expected_prev[9] )
		&& ((io_expected_prev[9] !== last_io_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[9] = io_expected_prev[9];
	end
	if (
		( io_expected_prev[10] !== 1'bx ) && ( io_prev[10] !== io_expected_prev[10] )
		&& ((io_expected_prev[10] !== last_io_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[10] = io_expected_prev[10];
	end
	if (
		( io_expected_prev[11] !== 1'bx ) && ( io_prev[11] !== io_expected_prev[11] )
		&& ((io_expected_prev[11] !== last_io_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[11] = io_expected_prev[11];
	end
	if (
		( io_expected_prev[12] !== 1'bx ) && ( io_prev[12] !== io_expected_prev[12] )
		&& ((io_expected_prev[12] !== last_io_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[12] = io_expected_prev[12];
	end
	if (
		( io_expected_prev[13] !== 1'bx ) && ( io_prev[13] !== io_expected_prev[13] )
		&& ((io_expected_prev[13] !== last_io_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[13] = io_expected_prev[13];
	end
	if (
		( io_expected_prev[14] !== 1'bx ) && ( io_prev[14] !== io_expected_prev[14] )
		&& ((io_expected_prev[14] !== last_io_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[14] = io_expected_prev[14];
	end
	if (
		( io_expected_prev[15] !== 1'bx ) && ( io_prev[15] !== io_expected_prev[15] )
		&& ((io_expected_prev[15] !== last_io_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port io[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", io_expected_prev);
		$display ("     Real value = %b", io_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_io_exp[15] = io_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module A4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD_ALUBUS;
reg ADD_CLKA;
reg ADD_CLKB;
reg ADD_CLR;
reg ADD_CN;
reg ADD_M;
reg ADD_S0;
reg ADD_S1;
reg ADD_S2;
reg ADD_S3;
reg [15:0] treg_io;
reg [1:0] latch_clk;
reg [1:0] latch_OEN;
reg [7:0] RAM_addr;
reg RAM_CLK;
reg RAM_GN;
reg RAM_inclock;
reg RAM_outclock;
reg RAM_wren;
reg shift_CLK;
reg shift_GN;
reg shift_LR;
reg [1:0] shift_S;
// wires                                               
wire ADD_CN4;
wire [15:0] io;

wire sampler;                             

// assign statements (if any)                          
assign io = treg_io;
A4 i1 (
// port map - connection between master ports and signals/registers   
	.ADD_ALUBUS(ADD_ALUBUS),
	.ADD_CLKA(ADD_CLKA),
	.ADD_CLKB(ADD_CLKB),
	.ADD_CLR(ADD_CLR),
	.ADD_CN(ADD_CN),
	.ADD_CN4(ADD_CN4),
	.ADD_M(ADD_M),
	.ADD_S0(ADD_S0),
	.ADD_S1(ADD_S1),
	.ADD_S2(ADD_S2),
	.ADD_S3(ADD_S3),
	.io(io),
	.latch_clk(latch_clk),
	.latch_OEN(latch_OEN),
	.RAM_addr(RAM_addr),
	.RAM_CLK(RAM_CLK),
	.RAM_GN(RAM_GN),
	.RAM_inclock(RAM_inclock),
	.RAM_outclock(RAM_outclock),
	.RAM_wren(RAM_wren),
	.shift_CLK(shift_CLK),
	.shift_GN(shift_GN),
	.shift_LR(shift_LR),
	.shift_S(shift_S)
);

// ADD_ALUBUS
initial
begin
	ADD_ALUBUS = 1'b1;
	ADD_ALUBUS = #80000 1'b0;
	ADD_ALUBUS = #20000 1'b1;
	ADD_ALUBUS = #40000 1'b0;
	ADD_ALUBUS = #20000 1'b1;
end 

// ADD_CLKA
initial
begin
	ADD_CLKA = 1'b0;
	ADD_CLKA = #70000 1'b1;
	ADD_CLKA = #10000 1'b0;
	ADD_CLKA = #50000 1'b1;
	ADD_CLKA = #10000 1'b0;
end 

// ADD_CLKB
initial
begin
	ADD_CLKB = 1'b0;
	ADD_CLKB = #50000 1'b1;
	ADD_CLKB = #10000 1'b0;
	ADD_CLKB = #50000 1'b1;
	ADD_CLKB = #10000 1'b0;
end 

// ADD_CLR
initial
begin
	ADD_CLR = 1'b1;
end 

// ADD_CN
initial
begin
	ADD_CN = 1'b0;
end 

// ADD_M
initial
begin
	ADD_M = 1'b0;
end 

// ADD_S0
initial
begin
	ADD_S0 = 1'b1;
end 

// ADD_S1
initial
begin
	ADD_S1 = 1'b0;
end 

// ADD_S2
initial
begin
	ADD_S2 = 1'b0;
end 

// ADD_S3
initial
begin
	ADD_S3 = 1'b1;
end 
// io[ 15 ]
initial
begin
	treg_io[15] = 1'b0;
	treg_io[15] = #20000 1'b1;
	treg_io[15] = #20000 1'bZ;
end 
// io[ 14 ]
initial
begin
	treg_io[14] = 1'b0;
	treg_io[14] = #40000 1'bZ;
end 
// io[ 13 ]
initial
begin
	treg_io[13] = 1'b1;
	treg_io[13] = #20000 1'b0;
	treg_io[13] = #20000 1'bZ;
end 
// io[ 12 ]
initial
begin
	treg_io[12] = 1'b1;
	treg_io[12] = #20000 1'b0;
	treg_io[12] = #20000 1'bZ;
end 
// io[ 11 ]
initial
begin
	treg_io[11] = 1'b0;
	treg_io[11] = #40000 1'bZ;
end 
// io[ 10 ]
initial
begin
	treg_io[10] = 1'b0;
	treg_io[10] = #40000 1'bZ;
end 
// io[ 9 ]
initial
begin
	treg_io[9] = 1'b1;
	treg_io[9] = #20000 1'b0;
	treg_io[9] = #20000 1'bZ;
end 
// io[ 8 ]
initial
begin
	treg_io[8] = 1'b1;
	treg_io[8] = #20000 1'b0;
	treg_io[8] = #20000 1'bZ;
end 
// io[ 7 ]
initial
begin
	treg_io[7] = 1'b0;
	treg_io[7] = #40000 1'bZ;
end 
// io[ 6 ]
initial
begin
	treg_io[6] = 1'b0;
	treg_io[6] = #40000 1'bZ;
end 
// io[ 5 ]
initial
begin
	treg_io[5] = 1'b1;
	treg_io[5] = #20000 1'b0;
	treg_io[5] = #20000 1'bZ;
end 
// io[ 4 ]
initial
begin
	treg_io[4] = 1'b1;
	treg_io[4] = #20000 1'b0;
	treg_io[4] = #20000 1'bZ;
end 
// io[ 3 ]
initial
begin
	treg_io[3] = 1'b0;
	treg_io[3] = #40000 1'bZ;
end 
// io[ 2 ]
initial
begin
	treg_io[2] = 1'b0;
	treg_io[2] = #40000 1'bZ;
end 
// io[ 1 ]
initial
begin
	treg_io[1] = 1'b1;
	treg_io[1] = #20000 1'b0;
	treg_io[1] = #20000 1'bZ;
end 
// io[ 0 ]
initial
begin
	treg_io[0] = 1'b1;
	treg_io[0] = #40000 1'bZ;
end 
// latch_clk[ 1 ]
initial
begin
	latch_clk[1] = 1'b0;
	latch_clk[1] = #10000 1'b1;
	latch_clk[1] = #10000 1'b0;
	latch_clk[1] = #70000 1'b1;
	latch_clk[1] = #10000 1'b0;
end 
// latch_clk[ 0 ]
initial
begin
	latch_clk[0] = 1'b0;
	latch_clk[0] = #30000 1'b1;
	latch_clk[0] = #10000 1'b0;
	latch_clk[0] = #110000 1'b1;
	latch_clk[0] = #10000 1'b0;
end 
// latch_OEN[ 1 ]
initial
begin
	latch_OEN[1] = 1'b1;
	latch_OEN[1] = #40000 1'b0;
	latch_OEN[1] = #20000 1'b1;
	latch_OEN[1] = #40000 1'b0;
	latch_OEN[1] = #20000 1'b1;
end 
// latch_OEN[ 0 ]
initial
begin
	latch_OEN[0] = 1'b1;
	latch_OEN[0] = #60000 1'b0;
	latch_OEN[0] = #20000 1'b1;
	latch_OEN[0] = #100000 1'b0;
	latch_OEN[0] = #20000 1'b1;
end 
// RAM_addr[ 7 ]
initial
begin
	RAM_addr[7] = 1'b0;
end 
// RAM_addr[ 6 ]
initial
begin
	RAM_addr[6] = 1'b0;
end 
// RAM_addr[ 5 ]
initial
begin
	RAM_addr[5] = 1'b0;
end 
// RAM_addr[ 4 ]
initial
begin
	RAM_addr[4] = 1'b0;
end 
// RAM_addr[ 3 ]
initial
begin
	RAM_addr[3] = 1'b0;
end 
// RAM_addr[ 2 ]
initial
begin
	RAM_addr[2] = 1'b0;
end 
// RAM_addr[ 1 ]
initial
begin
	RAM_addr[1] = 1'b0;
end 
// RAM_addr[ 0 ]
initial
begin
	RAM_addr[0] = 1'b0;
end 

// RAM_CLK
initial
begin
	RAM_CLK = 1'b0;
	RAM_CLK = #25000 1'b1;
	RAM_CLK = #15000 1'b0;
	RAM_CLK = #105000 1'b1;
	RAM_CLK = #15000 1'b0;
end 

// RAM_GN
initial
begin
	RAM_GN = 1'b1;
	RAM_GN = #120000 1'b0;
	RAM_GN = #20000 1'b1;
	RAM_GN = #20000 1'b0;
	RAM_GN = #20000 1'b1;
end 

// RAM_inclock
initial
begin
	RAM_inclock = 1'b0;
	RAM_inclock = #30000 1'b1;
	RAM_inclock = #10000 1'b0;
	RAM_inclock = #110000 1'b1;
	RAM_inclock = #10000 1'b0;
end 

// RAM_outclock
initial
begin
	RAM_outclock = 1'b0;
	RAM_outclock = #120000 1'b1;
	RAM_outclock = #20000 1'b0;
	RAM_outclock = #20000 1'b1;
	RAM_outclock = #20000 1'b0;
end 

// RAM_wren
initial
begin
	RAM_wren = 1'b0;
	RAM_wren = #20000 1'b1;
	RAM_wren = #20000 1'b0;
	RAM_wren = #100000 1'b1;
	RAM_wren = #20000 1'b0;
end 

// shift_CLK
initial
begin
	shift_CLK = 1'b0;
	shift_CLK = #165000 1'b1;
	shift_CLK = #10000 1'b0;
end 

// shift_GN
initial
begin
	shift_GN = 1'b1;
end 

// shift_LR
initial
begin
	shift_LR = 1'b0;
end 
// shift_S[ 1 ]
initial
begin
	shift_S[1] = 1'b0;
end 
// shift_S[ 0 ]
initial
begin
	shift_S[0] = 1'b0;
end 

A4_vlg_sample_tst tb_sample (
	.ADD_ALUBUS(ADD_ALUBUS),
	.ADD_CLKA(ADD_CLKA),
	.ADD_CLKB(ADD_CLKB),
	.ADD_CLR(ADD_CLR),
	.ADD_CN(ADD_CN),
	.ADD_M(ADD_M),
	.ADD_S0(ADD_S0),
	.ADD_S1(ADD_S1),
	.ADD_S2(ADD_S2),
	.ADD_S3(ADD_S3),
	.io(io),
	.latch_clk(latch_clk),
	.latch_OEN(latch_OEN),
	.RAM_addr(RAM_addr),
	.RAM_CLK(RAM_CLK),
	.RAM_GN(RAM_GN),
	.RAM_inclock(RAM_inclock),
	.RAM_outclock(RAM_outclock),
	.RAM_wren(RAM_wren),
	.shift_CLK(shift_CLK),
	.shift_GN(shift_GN),
	.shift_LR(shift_LR),
	.shift_S(shift_S),
	.sampler_tx(sampler)
);

A4_vlg_check_tst tb_out(
	.ADD_CN4(ADD_CN4),
	.io(io),
	.sampler_rx(sampler)
);
endmodule

