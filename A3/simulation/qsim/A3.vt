// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2017 12:28:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    A3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module A3_vlg_sample_tst(
	addr,
	CLK,
	dataIn,
	GN,
	inclock,
	outclock,
	wren,
	sampler_tx
);
input [7:0] addr;
input  CLK;
input [15:0] dataIn;
input  GN;
input  inclock;
input  outclock;
input  wren;
output sampler_tx;

reg sample;
time current_time;
always @(addr or CLK or dataIn or GN or inclock or outclock or wren)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module A3_vlg_check_tst (
	dataOut,
	sampler_rx
);
input [15:0] dataOut;
input sampler_rx;

reg [15:0] dataOut_expected;

reg [15:0] dataOut_prev;

reg [15:0] dataOut_expected_prev;

reg [15:0] last_dataOut_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	dataOut_prev = dataOut;
end

// update expected /o prevs

always @(trigger)
begin
	dataOut_expected_prev = dataOut_expected;
end


// expected dataOut[ 15 ]
initial
begin
	dataOut_expected[15] = 1'bX;
end 
// expected dataOut[ 14 ]
initial
begin
	dataOut_expected[14] = 1'bX;
end 
// expected dataOut[ 13 ]
initial
begin
	dataOut_expected[13] = 1'bX;
end 
// expected dataOut[ 12 ]
initial
begin
	dataOut_expected[12] = 1'bX;
end 
// expected dataOut[ 11 ]
initial
begin
	dataOut_expected[11] = 1'bX;
end 
// expected dataOut[ 10 ]
initial
begin
	dataOut_expected[10] = 1'bX;
end 
// expected dataOut[ 9 ]
initial
begin
	dataOut_expected[9] = 1'bX;
end 
// expected dataOut[ 8 ]
initial
begin
	dataOut_expected[8] = 1'bX;
end 
// expected dataOut[ 7 ]
initial
begin
	dataOut_expected[7] = 1'bX;
end 
// expected dataOut[ 6 ]
initial
begin
	dataOut_expected[6] = 1'bX;
end 
// expected dataOut[ 5 ]
initial
begin
	dataOut_expected[5] = 1'bX;
end 
// expected dataOut[ 4 ]
initial
begin
	dataOut_expected[4] = 1'bX;
end 
// expected dataOut[ 3 ]
initial
begin
	dataOut_expected[3] = 1'bX;
end 
// expected dataOut[ 2 ]
initial
begin
	dataOut_expected[2] = 1'bX;
end 
// expected dataOut[ 1 ]
initial
begin
	dataOut_expected[1] = 1'bX;
end 
// expected dataOut[ 0 ]
initial
begin
	dataOut_expected[0] = 1'bX;
end 
// generate trigger
always @(dataOut_expected or dataOut)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dataOut = %b | ",dataOut_expected_prev);
	$display("| real dataOut = %b | ",dataOut_prev);
`endif
	if (
		( dataOut_expected_prev[0] !== 1'bx ) && ( dataOut_prev[0] !== dataOut_expected_prev[0] )
		&& ((dataOut_expected_prev[0] !== last_dataOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[0] = dataOut_expected_prev[0];
	end
	if (
		( dataOut_expected_prev[1] !== 1'bx ) && ( dataOut_prev[1] !== dataOut_expected_prev[1] )
		&& ((dataOut_expected_prev[1] !== last_dataOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[1] = dataOut_expected_prev[1];
	end
	if (
		( dataOut_expected_prev[2] !== 1'bx ) && ( dataOut_prev[2] !== dataOut_expected_prev[2] )
		&& ((dataOut_expected_prev[2] !== last_dataOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[2] = dataOut_expected_prev[2];
	end
	if (
		( dataOut_expected_prev[3] !== 1'bx ) && ( dataOut_prev[3] !== dataOut_expected_prev[3] )
		&& ((dataOut_expected_prev[3] !== last_dataOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[3] = dataOut_expected_prev[3];
	end
	if (
		( dataOut_expected_prev[4] !== 1'bx ) && ( dataOut_prev[4] !== dataOut_expected_prev[4] )
		&& ((dataOut_expected_prev[4] !== last_dataOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[4] = dataOut_expected_prev[4];
	end
	if (
		( dataOut_expected_prev[5] !== 1'bx ) && ( dataOut_prev[5] !== dataOut_expected_prev[5] )
		&& ((dataOut_expected_prev[5] !== last_dataOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[5] = dataOut_expected_prev[5];
	end
	if (
		( dataOut_expected_prev[6] !== 1'bx ) && ( dataOut_prev[6] !== dataOut_expected_prev[6] )
		&& ((dataOut_expected_prev[6] !== last_dataOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[6] = dataOut_expected_prev[6];
	end
	if (
		( dataOut_expected_prev[7] !== 1'bx ) && ( dataOut_prev[7] !== dataOut_expected_prev[7] )
		&& ((dataOut_expected_prev[7] !== last_dataOut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[7] = dataOut_expected_prev[7];
	end
	if (
		( dataOut_expected_prev[8] !== 1'bx ) && ( dataOut_prev[8] !== dataOut_expected_prev[8] )
		&& ((dataOut_expected_prev[8] !== last_dataOut_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[8] = dataOut_expected_prev[8];
	end
	if (
		( dataOut_expected_prev[9] !== 1'bx ) && ( dataOut_prev[9] !== dataOut_expected_prev[9] )
		&& ((dataOut_expected_prev[9] !== last_dataOut_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[9] = dataOut_expected_prev[9];
	end
	if (
		( dataOut_expected_prev[10] !== 1'bx ) && ( dataOut_prev[10] !== dataOut_expected_prev[10] )
		&& ((dataOut_expected_prev[10] !== last_dataOut_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[10] = dataOut_expected_prev[10];
	end
	if (
		( dataOut_expected_prev[11] !== 1'bx ) && ( dataOut_prev[11] !== dataOut_expected_prev[11] )
		&& ((dataOut_expected_prev[11] !== last_dataOut_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[11] = dataOut_expected_prev[11];
	end
	if (
		( dataOut_expected_prev[12] !== 1'bx ) && ( dataOut_prev[12] !== dataOut_expected_prev[12] )
		&& ((dataOut_expected_prev[12] !== last_dataOut_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[12] = dataOut_expected_prev[12];
	end
	if (
		( dataOut_expected_prev[13] !== 1'bx ) && ( dataOut_prev[13] !== dataOut_expected_prev[13] )
		&& ((dataOut_expected_prev[13] !== last_dataOut_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[13] = dataOut_expected_prev[13];
	end
	if (
		( dataOut_expected_prev[14] !== 1'bx ) && ( dataOut_prev[14] !== dataOut_expected_prev[14] )
		&& ((dataOut_expected_prev[14] !== last_dataOut_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[14] = dataOut_expected_prev[14];
	end
	if (
		( dataOut_expected_prev[15] !== 1'bx ) && ( dataOut_prev[15] !== dataOut_expected_prev[15] )
		&& ((dataOut_expected_prev[15] !== last_dataOut_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataOut_expected_prev);
		$display ("     Real value = %b", dataOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dataOut_exp[15] = dataOut_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module A3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] addr;
reg CLK;
reg [15:0] dataIn;
reg GN;
reg inclock;
reg outclock;
reg wren;
// wires                                               
wire [15:0] dataOut;

wire sampler;                             

// assign statements (if any)                          
A3 i1 (
// port map - connection between master ports and signals/registers   
	.addr(addr),
	.CLK(CLK),
	.dataIn(dataIn),
	.dataOut(dataOut),
	.GN(GN),
	.inclock(inclock),
	.outclock(outclock),
	.wren(wren)
);
// addr[ 7 ]
initial
begin
	addr[7] = 1'b0;
end 
// addr[ 6 ]
initial
begin
	addr[6] = 1'b0;
end 
// addr[ 5 ]
initial
begin
	addr[5] = 1'b0;
end 
// addr[ 4 ]
initial
begin
	addr[4] = 1'b0;
end 
// addr[ 3 ]
initial
begin
	addr[3] = 1'b0;
end 
// addr[ 2 ]
initial
begin
	addr[2] = 1'b0;
end 
// addr[ 1 ]
initial
begin
	addr[1] = 1'b0;
end 
// addr[ 0 ]
always
begin
	addr[0] = 1'b0;
	addr[0] = #500000 1'b1;
	#500000;
end 

// CLK
initial
begin
	CLK = 1'b1;
end 
// dataIn[ 15 ]
initial
begin
	dataIn[15] = 1'b0;
end 
// dataIn[ 14 ]
initial
begin
	dataIn[14] = 1'b0;
end 
// dataIn[ 13 ]
initial
begin
	dataIn[13] = 1'b0;
end 
// dataIn[ 12 ]
initial
begin
	dataIn[12] = 1'b0;
end 
// dataIn[ 11 ]
initial
begin
	dataIn[11] = 1'b0;
end 
// dataIn[ 10 ]
initial
begin
	dataIn[10] = 1'b0;
end 
// dataIn[ 9 ]
initial
begin
	dataIn[9] = 1'b0;
end 
// dataIn[ 8 ]
initial
begin
	dataIn[8] = 1'b0;
end 
// dataIn[ 7 ]
initial
begin
	dataIn[7] = 1'b0;
end 
// dataIn[ 6 ]
initial
begin
	dataIn[6] = 1'b0;
	dataIn[6] = #620000 1'b1;
end 
// dataIn[ 5 ]
initial
begin
	dataIn[5] = 1'b0;
	dataIn[5] = #300000 1'b1;
	dataIn[5] = #320000 1'b0;
	dataIn[5] = #320000 1'b1;
end 
// dataIn[ 4 ]
initial
begin
	dataIn[4] = 1'b0;
	# 140000;
	repeat(2)
	begin
		dataIn[4] = 1'b1;
		dataIn[4] = #160000 1'b0;
		# 160000;
	end
	dataIn[4] = 1'b1;
	dataIn[4] = #160000 1'b0;
end 
// dataIn[ 3 ]
initial
begin
	dataIn[3] = 1'b0;
	# 60000;
	repeat(5)
	begin
		dataIn[3] = 1'b1;
		dataIn[3] = #80000 1'b0;
		# 80000;
	end
	dataIn[3] = 1'b1;
	dataIn[3] = #80000 1'b0;
end 
// dataIn[ 2 ]
initial
begin
	dataIn[2] = 1'b0;
	# 20000;
	repeat(12)
	begin
		dataIn[2] = 1'b1;
		dataIn[2] = #40000 1'b0;
		# 40000;
	end
	dataIn[2] = 1'b1;
end 
// dataIn[ 1 ]
always
begin
	dataIn[1] = 1'b1;
	dataIn[1] = #20000 1'b0;
	#20000;
end 
// dataIn[ 0 ]
always
begin
	dataIn[0] = 1'b0;
	dataIn[0] = #10000 1'b1;
	#10000;
end 

// GN
always
begin
	GN = 1'b0;
	GN = #2500 1'b1;
	#2500;
end 

// inclock
always
begin
	inclock = 1'b0;
	inclock = #5000 1'b1;
	#5000;
end 

// outclock
initial
begin
	outclock = 1'b1;
	# 5000;
	repeat(99)
	begin
		outclock = 1'b0;
		outclock = #5000 1'b1;
		# 5000;
	end
	outclock = 1'b0;
end 

// wren
always
begin
	wren = 1'b0;
	wren = #5000 1'b1;
	#5000;
end 

A3_vlg_sample_tst tb_sample (
	.addr(addr),
	.CLK(CLK),
	.dataIn(dataIn),
	.GN(GN),
	.inclock(inclock),
	.outclock(outclock),
	.wren(wren),
	.sampler_tx(sampler)
);

A3_vlg_check_tst tb_out(
	.dataOut(dataOut),
	.sampler_rx(sampler)
);
endmodule

