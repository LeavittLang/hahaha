// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2017 19:10:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Shift_Register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Shift_Register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] D;
reg GN;
reg LR;
reg [1:0] S;
// wires                                               

// assign statements (if any)                          
Shift_Register i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.D(D),
	.GN(GN),
	.LR(LR),
	.S(S)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #50000 1'b1;
	#50000;
end 
// D[ 15 ]
initial
begin
	D[15] = 1'b0;
end 
// D[ 14 ]
initial
begin
	D[14] = 1'b0;
end 
// D[ 13 ]
initial
begin
	D[13] = 1'b0;
end 
// D[ 12 ]
initial
begin
	D[12] = 1'b0;
end 
// D[ 11 ]
initial
begin
	D[11] = 1'b0;
end 
// D[ 10 ]
initial
begin
	D[10] = 1'b0;
end 
// D[ 9 ]
initial
begin
	D[9] = 1'b0;
end 
// D[ 8 ]
initial
begin
	D[8] = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
	D[4] = #900000 1'b1;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #100000 1'b1;
	D[3] = #800000 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
	D[2] = #100000 1'b0;
	D[2] = #400000 1'b1;
	D[2] = #400000 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b1;
	# 100000;
	repeat(2)
	begin
		D[1] = 1'b0;
		D[1] = #200000 1'b1;
		# 200000;
	end
	D[1] = 1'b0;
end 
// D[ 0 ]
always
begin
	D[0] = 1'b1;
	D[0] = #100000 1'b0;
	#100000;
end 

// GN
initial
begin
	GN = 1'b0;
end 

// LR
initial
begin
	LR = 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

