// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2017 22:52:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    A2ADD16c
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module A2ADD16c_vlg_sample_tst(
	AI,
	ALUBUS,
	BI,
	CLKA,
	CLKB,
	CN,
	M,
	S0,
	S1,
	S2,
	S3,
	sampler_tx
);
input [15:0] AI;
input  ALUBUS;
input [15:0] BI;
input  CLKA;
input  CLKB;
input  CN;
input  M;
input  S0;
input  S1;
input  S2;
input  S3;
output sampler_tx;

reg sample;
time current_time;
always @(AI or ALUBUS or BI or CLKA or CLKB or CN or M or S0 or S1 or S2 or S3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module A2ADD16c_vlg_check_tst (
	CN4,
	Fo,
	sampler_rx
);
input  CN4;
input [15:0] Fo;
input sampler_rx;

reg  CN4_expected;
reg [15:0] Fo_expected;

reg  CN4_prev;
reg [15:0] Fo_prev;

reg  CN4_expected_prev;
reg [15:0] Fo_expected_prev;

reg  last_CN4_exp;
reg [15:0] last_Fo_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	CN4_prev = CN4;
	Fo_prev = Fo;
end

// update expected /o prevs

always @(trigger)
begin
	CN4_expected_prev = CN4_expected;
	Fo_expected_prev = Fo_expected;
end



// expected CN4
initial
begin
	CN4_expected = 1'bX;
end 
// expected Fo[ 15 ]
initial
begin
	Fo_expected[15] = 1'bX;
end 
// expected Fo[ 14 ]
initial
begin
	Fo_expected[14] = 1'bX;
end 
// expected Fo[ 13 ]
initial
begin
	Fo_expected[13] = 1'bX;
end 
// expected Fo[ 12 ]
initial
begin
	Fo_expected[12] = 1'bX;
end 
// expected Fo[ 11 ]
initial
begin
	Fo_expected[11] = 1'bX;
end 
// expected Fo[ 10 ]
initial
begin
	Fo_expected[10] = 1'bX;
end 
// expected Fo[ 9 ]
initial
begin
	Fo_expected[9] = 1'bX;
end 
// expected Fo[ 8 ]
initial
begin
	Fo_expected[8] = 1'bX;
end 
// expected Fo[ 7 ]
initial
begin
	Fo_expected[7] = 1'bX;
end 
// expected Fo[ 6 ]
initial
begin
	Fo_expected[6] = 1'bX;
end 
// expected Fo[ 5 ]
initial
begin
	Fo_expected[5] = 1'bX;
end 
// expected Fo[ 4 ]
initial
begin
	Fo_expected[4] = 1'bX;
end 
// expected Fo[ 3 ]
initial
begin
	Fo_expected[3] = 1'bX;
end 
// expected Fo[ 2 ]
initial
begin
	Fo_expected[2] = 1'bX;
end 
// expected Fo[ 1 ]
initial
begin
	Fo_expected[1] = 1'bX;
end 
// expected Fo[ 0 ]
initial
begin
	Fo_expected[0] = 1'bX;
end 
// generate trigger
always @(CN4_expected or CN4 or Fo_expected or Fo)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CN4 = %b | expected Fo = %b | ",CN4_expected_prev,Fo_expected_prev);
	$display("| real CN4 = %b | real Fo = %b | ",CN4_prev,Fo_prev);
`endif
	if (
		( CN4_expected_prev !== 1'bx ) && ( CN4_prev !== CN4_expected_prev )
		&& ((CN4_expected_prev !== last_CN4_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CN4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CN4_expected_prev);
		$display ("     Real value = %b", CN4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CN4_exp = CN4_expected_prev;
	end
	if (
		( Fo_expected_prev[0] !== 1'bx ) && ( Fo_prev[0] !== Fo_expected_prev[0] )
		&& ((Fo_expected_prev[0] !== last_Fo_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[0] = Fo_expected_prev[0];
	end
	if (
		( Fo_expected_prev[1] !== 1'bx ) && ( Fo_prev[1] !== Fo_expected_prev[1] )
		&& ((Fo_expected_prev[1] !== last_Fo_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[1] = Fo_expected_prev[1];
	end
	if (
		( Fo_expected_prev[2] !== 1'bx ) && ( Fo_prev[2] !== Fo_expected_prev[2] )
		&& ((Fo_expected_prev[2] !== last_Fo_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[2] = Fo_expected_prev[2];
	end
	if (
		( Fo_expected_prev[3] !== 1'bx ) && ( Fo_prev[3] !== Fo_expected_prev[3] )
		&& ((Fo_expected_prev[3] !== last_Fo_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[3] = Fo_expected_prev[3];
	end
	if (
		( Fo_expected_prev[4] !== 1'bx ) && ( Fo_prev[4] !== Fo_expected_prev[4] )
		&& ((Fo_expected_prev[4] !== last_Fo_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[4] = Fo_expected_prev[4];
	end
	if (
		( Fo_expected_prev[5] !== 1'bx ) && ( Fo_prev[5] !== Fo_expected_prev[5] )
		&& ((Fo_expected_prev[5] !== last_Fo_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[5] = Fo_expected_prev[5];
	end
	if (
		( Fo_expected_prev[6] !== 1'bx ) && ( Fo_prev[6] !== Fo_expected_prev[6] )
		&& ((Fo_expected_prev[6] !== last_Fo_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[6] = Fo_expected_prev[6];
	end
	if (
		( Fo_expected_prev[7] !== 1'bx ) && ( Fo_prev[7] !== Fo_expected_prev[7] )
		&& ((Fo_expected_prev[7] !== last_Fo_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[7] = Fo_expected_prev[7];
	end
	if (
		( Fo_expected_prev[8] !== 1'bx ) && ( Fo_prev[8] !== Fo_expected_prev[8] )
		&& ((Fo_expected_prev[8] !== last_Fo_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[8] = Fo_expected_prev[8];
	end
	if (
		( Fo_expected_prev[9] !== 1'bx ) && ( Fo_prev[9] !== Fo_expected_prev[9] )
		&& ((Fo_expected_prev[9] !== last_Fo_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[9] = Fo_expected_prev[9];
	end
	if (
		( Fo_expected_prev[10] !== 1'bx ) && ( Fo_prev[10] !== Fo_expected_prev[10] )
		&& ((Fo_expected_prev[10] !== last_Fo_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[10] = Fo_expected_prev[10];
	end
	if (
		( Fo_expected_prev[11] !== 1'bx ) && ( Fo_prev[11] !== Fo_expected_prev[11] )
		&& ((Fo_expected_prev[11] !== last_Fo_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[11] = Fo_expected_prev[11];
	end
	if (
		( Fo_expected_prev[12] !== 1'bx ) && ( Fo_prev[12] !== Fo_expected_prev[12] )
		&& ((Fo_expected_prev[12] !== last_Fo_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[12] = Fo_expected_prev[12];
	end
	if (
		( Fo_expected_prev[13] !== 1'bx ) && ( Fo_prev[13] !== Fo_expected_prev[13] )
		&& ((Fo_expected_prev[13] !== last_Fo_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[13] = Fo_expected_prev[13];
	end
	if (
		( Fo_expected_prev[14] !== 1'bx ) && ( Fo_prev[14] !== Fo_expected_prev[14] )
		&& ((Fo_expected_prev[14] !== last_Fo_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[14] = Fo_expected_prev[14];
	end
	if (
		( Fo_expected_prev[15] !== 1'bx ) && ( Fo_prev[15] !== Fo_expected_prev[15] )
		&& ((Fo_expected_prev[15] !== last_Fo_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Fo[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Fo_expected_prev);
		$display ("     Real value = %b", Fo_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Fo_exp[15] = Fo_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module A2ADD16c_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] AI;
reg ALUBUS;
reg [15:0] BI;
reg CLKA;
reg CLKB;
reg CN;
reg M;
reg S0;
reg S1;
reg S2;
reg S3;
// wires                                               
wire CN4;
wire [15:0] Fo;

wire sampler;                             

// assign statements (if any)                          
A2ADD16c i1 (
// port map - connection between master ports and signals/registers   
	.AI(AI),
	.ALUBUS(ALUBUS),
	.BI(BI),
	.CLKA(CLKA),
	.CLKB(CLKB),
	.CN(CN),
	.CN4(CN4),
	.Fo(Fo),
	.M(M),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3)
);

// S3
initial
begin
	S3 = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
end 

// S0
initial
begin
	S0 = 1'b0;
end 

// M
initial
begin
	M = 1'b0;
end 

// CN
initial
begin
	CN = 1'b0;
end 
// AI[ 15 ]
initial
begin
	AI[15] = 1'b0;
end 
// AI[ 14 ]
initial
begin
	AI[14] = 1'b0;
end 
// AI[ 13 ]
initial
begin
	AI[13] = 1'b0;
end 
// AI[ 12 ]
initial
begin
	AI[12] = 1'b0;
end 
// AI[ 11 ]
initial
begin
	AI[11] = 1'b0;
end 
// AI[ 10 ]
initial
begin
	AI[10] = 1'b0;
end 
// AI[ 9 ]
initial
begin
	AI[9] = 1'b0;
end 
// AI[ 8 ]
initial
begin
	AI[8] = 1'b0;
end 
// AI[ 7 ]
initial
begin
	AI[7] = 1'b0;
end 
// AI[ 6 ]
initial
begin
	AI[6] = 1'b0;
end 
// AI[ 5 ]
initial
begin
	AI[5] = 1'b0;
end 
// AI[ 4 ]
initial
begin
	AI[4] = 1'b0;
end 
// AI[ 3 ]
initial
begin
	AI[3] = 1'b0;
	AI[3] = #800000 1'b1;
end 
// AI[ 2 ]
initial
begin
	AI[2] = 1'b0;
	AI[2] = #400000 1'b1;
	AI[2] = #400000 1'b0;
end 
// AI[ 1 ]
initial
begin
	repeat(2)
	begin
		AI[1] = 1'b0;
		AI[1] = #200000 1'b1;
		# 200000;
	end
	AI[1] = 1'b0;
end 
// AI[ 0 ]
always
begin
	AI[0] = 1'b0;
	AI[0] = #100000 1'b1;
	#100000;
end 
// BI[ 15 ]
initial
begin
	BI[15] = 1'b0;
end 
// BI[ 14 ]
initial
begin
	BI[14] = 1'b0;
end 
// BI[ 13 ]
initial
begin
	BI[13] = 1'b0;
end 
// BI[ 12 ]
initial
begin
	BI[12] = 1'b0;
end 
// BI[ 11 ]
initial
begin
	BI[11] = 1'b0;
end 
// BI[ 10 ]
initial
begin
	BI[10] = 1'b0;
end 
// BI[ 9 ]
initial
begin
	BI[9] = 1'b0;
end 
// BI[ 8 ]
initial
begin
	BI[8] = 1'b0;
end 
// BI[ 7 ]
initial
begin
	BI[7] = 1'b0;
end 
// BI[ 6 ]
initial
begin
	BI[6] = 1'b0;
end 
// BI[ 5 ]
initial
begin
	BI[5] = 1'b0;
end 
// BI[ 4 ]
initial
begin
	BI[4] = 1'b0;
	BI[4] = #800000 1'b1;
end 
// BI[ 3 ]
initial
begin
	BI[3] = 1'b0;
	BI[3] = #400000 1'b1;
	BI[3] = #400000 1'b0;
end 
// BI[ 2 ]
initial
begin
	repeat(2)
	begin
		BI[2] = 1'b0;
		BI[2] = #200000 1'b1;
		# 200000;
	end
	BI[2] = 1'b0;
end 
// BI[ 1 ]
always
begin
	BI[1] = 1'b0;
	BI[1] = #100000 1'b1;
	#100000;
end 
// BI[ 0 ]
initial
begin
	BI[0] = 1'b1;
end 

// CLKA
initial
begin
	CLKA = 1'b1;
	# 33000;
	repeat(9)
	begin
		CLKA = 1'b0;
		CLKA = #67000 1'b1;
		# 33000;
	end
	CLKA = 1'b0;
end 

// CLKB
initial
begin
	CLKB = 1'b0;
	CLKB = #33000 1'b1;
	# 33000;
	repeat(9)
	begin
		CLKB = 1'b0;
		CLKB = #67000 1'b1;
		# 33000;
	end
	CLKB = 1'b0;
end 

// ALUBUS
initial
begin
	ALUBUS = 1'b1;
	# 66000;
	repeat(9)
	begin
		ALUBUS = 1'b0;
		ALUBUS = #34000 1'b1;
		# 66000;
	end
	ALUBUS = 1'b0;
end 

A2ADD16c_vlg_sample_tst tb_sample (
	.AI(AI),
	.ALUBUS(ALUBUS),
	.BI(BI),
	.CLKA(CLKA),
	.CLKB(CLKB),
	.CN(CN),
	.M(M),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.sampler_tx(sampler)
);

A2ADD16c_vlg_check_tst tb_out(
	.CN4(CN4),
	.Fo(Fo),
	.sampler_rx(sampler)
);
endmodule

